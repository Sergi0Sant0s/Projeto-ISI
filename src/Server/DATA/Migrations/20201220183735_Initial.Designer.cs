// <auto-generated />
using System;
using DATA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DATA.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20201220183735_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DATA.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOfEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DATA.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamAId")
                        .HasColumnType("int");

                    b.Property<int>("TeamBId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamWinnerId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("EventId");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("TeamWinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DATA.Entities.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MapId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("DATA.Entities.MapOfGame", b =>
                {
                    b.Property<int>("MapOfGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("MapaId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamAResult")
                        .HasColumnType("int");

                    b.Property<int?>("TeamBResult")
                        .HasColumnType("int");

                    b.HasKey("MapOfGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("MapaId");

                    b.ToTable("MapOfGame");
                });

            modelBuilder.Entity("DATA.Entities.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DATA.Entities.StatPlayerOnMap", b =>
                {
                    b.Property<int>("StatPlayerOnMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("ADR")
                        .HasColumnType("float");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int?>("MapOfGameId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("StatPlayerOnMapId");

                    b.HasIndex("MapOfGameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("StatPlayerOnMap");
                });

            modelBuilder.Entity("DATA.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TeamName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TeamNationality")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TeamRanking")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EventTeam", b =>
                {
                    b.Property<int>("EventsEventId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsTeamId")
                        .HasColumnType("int");

                    b.HasKey("EventsEventId", "TeamsTeamId");

                    b.HasIndex("TeamsTeamId");

                    b.ToTable("EventTeam");
                });

            modelBuilder.Entity("DATA.Entities.Game", b =>
                {
                    b.HasOne("DATA.Entities.Event", "Event")
                        .WithMany("Games")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATA.Entities.Team", "TeamA")
                        .WithMany("GamesTeamA")
                        .HasForeignKey("TeamAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATA.Entities.Team", "TeamB")
                        .WithMany("GamesTeamB")
                        .HasForeignKey("TeamBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATA.Entities.Team", "TeamWinner")
                        .WithMany("GamesTeamWinner")
                        .HasForeignKey("TeamWinnerId");

                    b.Navigation("Event");

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("TeamWinner");
                });

            modelBuilder.Entity("DATA.Entities.MapOfGame", b =>
                {
                    b.HasOne("DATA.Entities.Game", "Game")
                        .WithMany("MapOfGame")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATA.Entities.Map", "Mapa")
                        .WithMany("MapofGame")
                        .HasForeignKey("MapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Mapa");
                });

            modelBuilder.Entity("DATA.Entities.StatPlayerOnMap", b =>
                {
                    b.HasOne("DATA.Entities.MapOfGame", null)
                        .WithMany("StatPlayerOnMap")
                        .HasForeignKey("MapOfGameId");

                    b.HasOne("DATA.Entities.Player", "Player")
                        .WithMany("StatPlayerOnMap")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATA.Entities.Team", "Team")
                        .WithMany("StatPlayerOnMap")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EventTeam", b =>
                {
                    b.HasOne("DATA.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATA.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DATA.Entities.Event", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("DATA.Entities.Game", b =>
                {
                    b.Navigation("MapOfGame");
                });

            modelBuilder.Entity("DATA.Entities.Map", b =>
                {
                    b.Navigation("MapofGame");
                });

            modelBuilder.Entity("DATA.Entities.MapOfGame", b =>
                {
                    b.Navigation("StatPlayerOnMap");
                });

            modelBuilder.Entity("DATA.Entities.Player", b =>
                {
                    b.Navigation("StatPlayerOnMap");
                });

            modelBuilder.Entity("DATA.Entities.Team", b =>
                {
                    b.Navigation("GamesTeamA");

                    b.Navigation("GamesTeamB");

                    b.Navigation("GamesTeamWinner");

                    b.Navigation("StatPlayerOnMap");
                });
#pragma warning restore 612, 618
        }
    }
}
